#!/usr/bin/env python
#snakemake to filter fastq files and run metagenomic assembly
import os
import glob

#find local files
FILES=glob.glob('*fq.gz')

#sort list to make sure forward read comes first
FILES.sort()

#set read pair 1 as first file
R1 = FILES[0]
R2 = FILES[1]
R1 = R1.split('.fq.')[0]
R2 = R2.split('.fq.')[0]

#set overall file id
FTL = R1.split('_R1')[0]
R0 = FTL

#load config parameters into variables
minimum_quality = 20
minimum_length = 35
contaminant_db = '/gpfs/home/znb17pxu/data/GRCh38/cancer/decoys/GRCh38_decoys_cancer.fasta'
outdir= config['outdir']
# Set Kraken database directory
krakendb = '/gpfs/data/datasets/kraken/'

rule all:
    input: done=("jobdone")

rule move_output:
    input: contigs=("%s/" %FTL), kraken_raw=("%s_thresh.kraken" %FTL), kraken_report=("%s_report.kraken" %FTL) 
    output: done=("jobdone")
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: "mv {input} {outdir}; rm -f *.fq *fastq *.gz; touch {output.done}"

rule kraken_report:
    input: ("%s_thresh.kraken" %FTL)
    output: ("%s_report.kraken" %FTL)
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: "kraken-report --db {krakendb} {input} > {output}"

rule Thresh_single:
    input: ("%s.kraken" %FTL)
    output: ("%s_thresh.kraken" %FTL)
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: 'kraken-filter --db {krakendb} --threshold 0.2 {input} > {output}'

rule contig_kraken:
    input: ("%s/%s_contigs.fasta" %(FTL, FTL))
    output: temp("%s.kraken" %FTL)
    params: cluster="-R 'rusage[mem=300000]' -M 300000 -o kraken_spades_log", queue="large-mem"
    shell: '/gpfs/software/kraken/0.10.6/kraken --preload --db {krakendb} --fasta-input {input} --output {output}'

rule spades_assembly:
    input: i1=("%s_unmapped.1.fastq" % R0), i2=("%s_unmapped.2.fastq" % R0)#mayneed to compress input for spades - see gzip_unmapped_fastq below commented out if fails
    output: contig_file=("%s/%s_contigs.fasta" %(FTL, FTL)), folder=("%s/" %FTL)
    params: cluster="-R 'rusage[mem=60000]' -M 60000 -o Assembly_log", queue="long-ib"
    shell: "module add spades/3.11.1; module remove python/anaconda/4.2/3.5; python /gpfs/software/spades/3.11.1/bin/metaspades.py -1 {input.i1} -2 {input.i2} -o {output.folder}; mv {FTL}/contigs.fasta {output.contig_file}"

rule Paired_Human_depletion:
    input: inR1=("%s_paired.fastq.gz" %R1), inR2=("%s_paired.fastq.gz" %R2)
    output: outR1=temp("%s_unmapped.1.fastq" %R0), outR2=temp("%s_unmapped.2.fastq" %R0), outR3=("%s_unmapped.0.2.fastq" %R0)
    params: cluster="-R 'rusage[mem=200000]' -M 200000 -o log", queue="large-mem"
    shell: "module add bbmap/37.28 java; bbduk.sh in1={input.inR1} in2={input.inR2} out1={output.outR1} out2={output.outR2} outs={output.outR3} k=30 -Xmx230g ref={contaminant_db} mcf=0.5"

rule Quality_Trimming:
    input: [file for file in FILES]
    output: temp("%s_paired.fastq.gz" %R1), temp("%s_unpaired.fastq.gz" %R1), temp("%s_paired.fastq.gz" %R2), temp("%s_unpaired.fastq.gz" %R2)
    params: cluster="-R 'rusage[mem=30000]' -M 30000 -o log", queue="short-ib"
    shell: "trimmomatic PE -threads 15 {input} {output} SLIDINGWINDOW:4:{minimum_quality} MINLEN:{minimum_length}"
